# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  pythonVersion: '3.9'
  projectRoot: '$(System.DefaultWorkingDirectory)'
  sonarCloudConnection: 'SonarCloud'
  sonarCloudOrganization: 'nexadeepls'
  sonarCloudProjectKey: 'customer-data-connect'

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: SecurityBuild
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'

    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov bandit safety
      displayName: 'Install dependencies'

    - script: |
        pytest --cov=. --cov-report=xml --cov-report=html tests/
      displayName: 'Run tests with coverage'
    # SAST with Bandit
    - script: |
        bandit -r . -x tests -f json -o $(Build.ArtifactStagingDirectory)/bandit-report.json
        bandit -r . -x tests -f html -o $(Build.ArtifactStagingDirectory)/bandit-report.html
      displayName: 'SAST - Bandit Security Scan'
      
        # Prepare SonarCloud analysis
    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: '$(sonarCloudConnection)'
        organization: '$(sonarCloudOrganization)'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: '$(sonarCloudProjectKey)'
        cliProjectName: 'Customer Data Connect'
        cliSources: '.'
        extraProperties: |
          sonar.python.coverage.reportPaths=coverage.xml
          sonar.python.bandit.reportPaths=$(Build.ArtifactStagingDirectory)/bandit-report.json
          sonar.exclusions=tests/**,**/*.html,**/*.css
      
    # Run SonarCloud analysis
    - task: SonarCloudAnalyze@1
      displayName: 'SonarCloud Analysis'
      
    # Publish SonarCloud quality gate result
    - task: SonarCloudPublish@1
      inputs:
        pollingTimeoutSec: '300'
      displayName: 'Publish SonarCloud Quality Gate Result'
    
    # Publish test and security reports
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/test-*.xml'
        failTaskOnFailedTests: true
      displayName: 'Publish Test Results'
      condition: succeededOrFailed()

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage.xml'
        reportDirectory: '$(System.DefaultWorkingDirectory)/htmlcov'
      displayName: 'Publish Code Coverage'
      
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'security-reports'
      displayName: 'Publish Security Reports'
